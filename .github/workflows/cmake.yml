name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - run: |
        git submodule init
        git submodule update
        
    - name: Install Qt
      # You may pin to the exact commit or the version.
      # uses: jurplel/install-qt-action@a10f4d43af43348aab618414b68a9d32cb008977
      uses: jurplel/install-qt-action@v2.13.2
    
    - name: Install Imath
      # Now this is quite dirty...
    - run: |
        git clone https://github.com/AcademySoftwareFoundation/Imath.git
        cd Imath
        mkdir build
        cd build
        cmake ..
        sudo make install
        
    - name: Install OpenEXR
      # Now this is quite dirty...
    - run: |
        git clone https://github.com/AcademySoftwareFoundation/openexr.git
        cd openexr
        mkdir build
        cd build
        cmake ..
        sudo make install
    
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      
